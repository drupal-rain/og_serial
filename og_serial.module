<?php

/**
 * @file
 * Drupal hook module system.
 */

include_once 'og_serial.inc';

/**
 * OG Serial default field name.
 */
define('OG_SERIAL_FIELD', 'og_serial');

/**
 * Implements hook_menu().
 */
function og_serial_menu() {
  $items = array();
  $items['group/%/%/admin/serial'] = array(
    'title' => 'Serial',
    'description' => 'Manage group content serial number.',
    'page callback' => 'og_serial_overview_page',
    'file' => 'og_serial.admin.inc',
    'access callback' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_og_ui_get_group_admin()
 */
function og_serial_og_ui_get_group_admin($group_type, $gid) {
  $items = array();
  if (og_user_access($group_type, $gid, 'administer serial')) {
    $items['serial'] = array(
      'title' => t('Serial'),
      'description' => t('Show serial counter related to this group.'),
      'href' => 'admin/serial',
    );
  }

  return $items;
}

/**
 * Implements hook_og_permissions().
 */
function og_serial_og_permission() {
  $permissions = array(
    'administer serial' => array(
      'title' => t('Administer group content serial number counter.'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_og_fields_info().
 */
function og_serial_og_fields_info() {
  $items[OG_SERIAL_FIELD] = array(
    'type' => array('group content'),
    'description' => t('Serial number of group content related to accessible groups.'),
    'field' => array(
      'settings' => array(),
      'field_name' => OG_SERIAL_FIELD,
      'type' => 'og_serial',
      'cardinality' => 1,
    ),
    'instance' => array(
      'label' => t('OG serial'),
      'widget' => array(
        'module' => 'og_serial',
        'settings' => array(),
        'type' => 'og_serial_hidden',
      ),
      'display' => array(
        'default' => array(
          'type' => 'og_serial_default',
        ),
      ),
    ),
  );

  return $items;
}

/**
 * Implements hook_field_info().
 */
function og_serial_field_info() {
  return array(
    'og_serial' => array(
      'label' => t('OG Serial'),
      'description' => t('Serial number for group content related to a group.'),
      'default_widget' => 'og_serial_widget',
      'default_formatter' => 'og_serial_formatter',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function og_serial_field_widget_info() {
  return array(
    'og_serial_hidden' => array(
      'label' => t('Hidden'),
      'field types' => array('og_serial'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function og_serial_field_formatter_info() {
  return array(
    'og_serial_default' => array(
      'label' => t('OG serial default'),
      'field types' => array('og_serial'),
      'settings' => array(),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 */
function og_serial_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];
  switch ($display['type']) {
    case 'og_serial_default':
      foreach ($items as $delta => $item) {
        $element[$delta] = array(
          '#markup' => theme('og_serial_formatter_default', $item),
        );
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_is_empty().
 */
function og_serial_field_is_empty($item, $field) {
  if (!empty($item['ogs_id'])) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Implements hook_field_insert().
 */
function og_serial_field_insert($entity_type, $entity, $field, $instance, $langcode, &$items) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  // @todo Support multiple group assign situation.
  if ($og_context = og_context()) {
    $group_type = $og_context['group_type'];
    $gid = $og_context['gid'];
    if (og_serial_ogs_is_installed($group_type, $gid, $entity_type, $bundle)) {
      $ogs_id = og_serial_ogs_get_id($group_type, $gid, $entity_type, $bundle);
      $items[] = array(
        'ogs_id' => $ogs_id,
        'sid' => og_serial_ogs_get_counter($ogs_id) + 1,
      );
      og_serial_ogs_increase_counter($ogs_id);
    }
  }
}

/**
 * Implements hook_theme().
 */
function og_serial_theme() {
  // Register the theme for the default formatter.
  return array(
    'og_serial_formatter_default' => array(
      'variables' => array(
        'ogs_id' => NULL,
        'sid' => NULL,
      ),
    ),
  );
}
